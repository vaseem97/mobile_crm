import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';
import '../../../../core/constants/app_constants.dart';
import '../../../../core/theme/app_colors.dart';
import '../../../../core/widgets/custom_button.dart';
import '../../../../core/widgets/custom_text_field.dart';
import '../../../../core/widgets/repair_job_card.dart';
import '../../../../core/services/service_locator.dart';
import '../../data/repositories/repair_repository_impl.dart';
import '../../domain/entities/repair_job.dart';

class AddRepairPage extends StatefulWidget {
  const AddRepairPage({Key? key}) : super(key: key);

  @override
  State<AddRepairPage> createState() => _AddRepairPageState();
}

class _AddRepairPageState extends State<AddRepairPage> {
  final _formKey = GlobalKey<FormState>();
  final _repairRepository = getService<RepairRepositoryImpl>();

  // Customer Info
  final _customerNameController = TextEditingController();
  final _customerPhoneController = TextEditingController();

  // Device Info
  final _deviceModelController = TextEditingController();
  String _selectedBrand = AppConstants.deviceBrands.first;
  final _devicePasswordController = TextEditingController();

  // Repair Info
  final _problemController = TextEditingController();
  final _estimatedCostController = TextEditingController();
  final _notesController = TextEditingController();
  final _selectedParts = <String>[];
  bool _isLoading = false;
  bool _canScanQR = false; // Feature flag for future QR scanner
  bool _useVoiceInput = false; // Feature flag for future voice input

  @override
  void dispose() {
    _customerNameController.dispose();
    _customerPhoneController.dispose();
    _deviceModelController.dispose();
    _devicePasswordController.dispose();
    _problemController.dispose();
    _estimatedCostController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) {
      // Show error snackbar
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please fill all required fields'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      // Get estimated cost as double
      double estimatedCost = 0.0;
      if (_estimatedCostController.text.isNotEmpty) {
        estimatedCost = double.parse(_estimatedCostController.text);
      }

      // Create RepairJob entity
      final newRepair = RepairJob(
        id: '', // Will be generated by repository
        customerName: _customerNameController.text,
        customerPhone: _customerPhoneController.text,
        deviceModel: _deviceModelController.text,
        deviceBrand: _selectedBrand,
        deviceColor: '', // Or set a default/remove if not essential in entity
        devicePassword: _devicePasswordController.text,
        problem: _problemController.text,
        partsToReplace: _selectedParts,
        estimatedCost: estimatedCost,
        createdAt: DateTime.now(),
        status: RepairStatus.pending,
        notes: _notesController.text,
      );

      // Save to Firestore via repository
      final repairId = await _repairRepository.createRepairJob(newRepair);

      if (mounted) {
        // Show success message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Repair job #$repairId created successfully!'),
            backgroundColor: AppColors.success,
            duration: const Duration(seconds: 2),
          ),
        );

        // Navigate back with the new repair ID
        context.pop(repairId);
      }
    } catch (e) {
      // Show error message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error: ${e.toString()}'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _scanCustomerQR() {
    // This will be implemented in the future
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('QR Scanner will be available in the next update'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  void _searchCustomer() {
    // This will be implemented in a future version
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Customer search will be available in the next update'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add New Repair'),
        actions: [
          if (_canScanQR)
            IconButton(
              icon: const Icon(Icons.qr_code_scanner),
              onPressed: _scanCustomerQR,
              tooltip: 'Scan Customer QR',
            ),
          IconButton(
            icon: const Icon(Icons.search),
            onPressed: _searchCustomer,
            tooltip: 'Search Existing Customer',
          ),
        ],
      ),
      body: SafeArea(
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                _buildCustomerInfo(),
                const SizedBox(height: 24),
                _buildDeviceInfo(),
                const SizedBox(height: 24),
                _buildRepairInfo(),
                const SizedBox(height: 32),
                CustomButton(
                  text: 'Submit Repair Job',
                  onPressed: _submitForm,
                  isLoading: _isLoading,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildCustomerInfo() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Customer Information',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
        ),
        const SizedBox(height: 16),
        CustomTextField(
          label: 'Customer Name',
          hint: 'Enter customer name',
          controller: _customerNameController,
          textCapitalization: TextCapitalization.words,
          prefixIcon: const Icon(Icons.person),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter customer name';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        CustomTextField(
          label: 'Phone Number',
          hint: 'Enter customer phone number',
          controller: _customerPhoneController,
          keyboardType: TextInputType.phone,
          prefixIcon: const Icon(Icons.phone),
          inputFormatters: [
            FilteringTextInputFormatter.digitsOnly,
            LengthLimitingTextInputFormatter(10),
          ],
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter phone number';
            }
            if (value.length != 10) {
              return 'Phone number must be 10 digits';
            }
            return null;
          },
        ),
        const SizedBox(height: 8),
        Text(
          'Note: Phone number will be used to identify returning customers',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: AppColors.textSecondary,
                fontStyle: FontStyle.italic,
              ),
        ),
      ],
    );
  }

  Widget _buildDeviceInfo() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Device Information',
          style: Theme.of(context).textTheme.titleMedium?.copyWith(
                fontWeight: FontWeight.bold,
              ),
        ),
        const SizedBox(height: 16),
        _buildDropdownField(
          label: 'Device Brand',
          value: _selectedBrand,
          items: AppConstants.deviceBrands,
          prefixIcon: const Icon(Icons.phone_android),
          onChanged: (value) {
            if (value != null) {
              setState(() {
                _selectedBrand = value;
              });
            }
          },
        ),
        const SizedBox(height: 16),
        CustomTextField(
          label: 'Device Model',
          hint: 'Enter device model (e.g. iPhone 13 Pro)',
          controller: _deviceModelController,
          prefixIcon: const Icon(Icons.smartphone),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter device model';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        CustomTextField(
          label: 'Device Password/PIN (Optional)',
          hint: 'Enter device password or pattern',
          controller: _devicePasswordController,
          prefixIcon: const Icon(Icons.lock),
          obscureText: true,
        ),
        const SizedBox(height: 16),
        Text(
          'Tip: Dial *#06# on most phones to see the IMEI number',
          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                color: AppColors.textSecondary,
                fontStyle: FontStyle.italic,
              ),
        ),
      ],
    );
  }

  Widget _buildRepairInfo() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Repair Details',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            if (_useVoiceInput)
              TextButton.icon(
                onPressed: () {
                  // Will be implemented in future version
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Voice input coming soon')),
                  );
                },
                icon: const Icon(Icons.mic, size: 18),
                label: const Text('Voice'),
              ),
          ],
        ),
        const SizedBox(height: 16),
        CustomTextField(
          label: 'Problem Description',
          hint: 'Describe the issue with the device',
          controller: _problemController,
          maxLines: 3,
          prefixIcon: const Icon(Icons.error_outline),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please describe the problem';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        _buildPartsSelector(),
        const SizedBox(height: 16),
        CustomTextField(
          label: 'Estimated Cost (₹)',
          hint: 'Enter estimated repair cost',
          controller: _estimatedCostController,
          keyboardType: TextInputType.number,
          prefixIcon: const Icon(Icons.currency_rupee),
          inputFormatters: [
            FilteringTextInputFormatter.digitsOnly,
          ],
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Please enter estimated cost';
            }
            return null;
          },
        ),
        const SizedBox(height: 16),
        CustomTextField(
          label: 'Additional Notes (Optional)',
          hint: 'Enter any additional notes or remarks',
          controller: _notesController,
          maxLines: 3,
          prefixIcon: const Icon(Icons.note),
        ),
        const SizedBox(height: 16),
        Card(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: Colors.grey.shade200),
          ),
          elevation: 0,
          color: Colors.grey.shade50,
          child: Padding(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Repair Summary',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                ),
                const SizedBox(height: 8),
                _buildSummaryItem('Customer', _customerNameController.text),
                _buildSummaryItem('Phone', _customerPhoneController.text),
                _buildSummaryItem('Device',
                    '${_selectedBrand} ${_deviceModelController.text}'),
                _buildSummaryItem('Problem', _problemController.text),
                _buildSummaryItem(
                    'Estimated Cost',
                    _estimatedCostController.text.isNotEmpty
                        ? '₹${_estimatedCostController.text}'
                        : '-'),
                _buildSummaryItem(
                    'Expected Completion',
                    DateFormat('dd MMM yyyy')
                        .format(DateTime.now().add(const Duration(days: 2)))),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildSummaryItem(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 2,
            child: Text(
              '$label:',
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                color: Colors.grey,
              ),
            ),
          ),
          Expanded(
            flex: 3,
            child: Text(
              value.isEmpty ? '-' : value,
              style: const TextStyle(
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> items,
    required void Function(String?) onChanged,
    Widget? prefixIcon,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w500,
                color: AppColors.textPrimary,
              ),
        ),
        const SizedBox(height: 8),
        Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: const Color(0xFFEEEEEE)),
          ),
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            children: [
              if (prefixIcon != null) ...[
                prefixIcon,
                const SizedBox(width: 12),
              ],
              Expanded(
                child: DropdownButtonHideUnderline(
                  child: DropdownButton<String>(
                    value: value,
                    isExpanded: true,
                    borderRadius: BorderRadius.circular(12),
                    items: items.map((String item) {
                      return DropdownMenuItem<String>(
                        value: item,
                        child: Text(item),
                      );
                    }).toList(),
                    onChanged: onChanged,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPartsSelector() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'Parts to Replace (Optional)',
          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                fontWeight: FontWeight.w500,
                color: AppColors.textPrimary,
              ),
        ),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: AppConstants.commonRepairProblems.map((part) {
            final isSelected = _selectedParts.contains(part);
            return FilterChip(
              label: Text(part),
              selected: isSelected,
              onSelected: (selected) {
                setState(() {
                  if (selected) {
                    _selectedParts.add(part);
                  } else {
                    _selectedParts.remove(part);
                  }
                });
              },
              labelStyle: TextStyle(
                color: isSelected ? AppColors.primary : AppColors.textPrimary,
              ),
              selectedColor: AppColors.primary.withOpacity(0.2),
              checkmarkColor: AppColors.primary,
              backgroundColor: Colors.white,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
                side: BorderSide(
                  color:
                      isSelected ? AppColors.primary : const Color(0xFFEEEEEE),
                ),
              ),
            );
          }).toList(),
        ),
      ],
    );
  }
}
